[
    {
        "id": "7869be979f4028b5",
        "type": "tab",
        "label": "Fluxo 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0345e18d3221f2bd",
        "type": "serial in",
        "z": "7869be979f4028b5",
        "name": "",
        "serial": "3ea0990259fc8187",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "bf9e1105e4e20834"
            ]
        ]
    },
    {
        "id": "5e61badf598aa024",
        "type": "serial out",
        "z": "7869be979f4028b5",
        "name": "",
        "serial": "3ea0990259fc8187",
        "x": 810,
        "y": 220,
        "wires": []
    },
    {
        "id": "bf9e1105e4e20834",
        "type": "function",
        "z": "7869be979f4028b5",
        "name": "function 1",
        "func": "// Extrair UID do payload\nvar cardUID = (msg.payload && msg.payload.trim()) || ''; // Verifica se msg.payload existe antes de chamar trim()\n\n// Exibir UID no console (opcional)\nconsole.log(\"Card UID:\", cardUID);\n\n// Verificar se o UID é um botão (assumindo que \"B\" representa o botão)\nif (cardUID === 'B') {\n    // Aguardar um pouco para evitar leituras múltiplas do botão\n    return null; // Abortar a execução se for um botão\n}\n\n// Limpar UID, removendo caracteres não hexadecimais\ncardUID = cardUID.replace(/[^0-9a-fA-F]/g, '');\n\n// Validar UID (opcional)\nif (!cardUID.match(/^[0-9a-fA-F]+$/)) {\n    console.error(\"UID não é válido após a limpeza.\");\n    return null;  // Abortar a execução se o UID não for válido\n}\n\n// Criar a consulta SQL\nmsg.topic = \"SELECT Saldo, Username FROM users WHERE CardUID = '\" + cardUID + \"';\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 240,
        "wires": [
            [
                "d340e847361c8e92"
            ]
        ]
    },
    {
        "id": "d988791fa63c92a1",
        "type": "function",
        "z": "7869be979f4028b5",
        "name": "function 2",
        "func": "var cardUID = (msg.payload && typeof msg.payload === 'string') ? msg.payload.trim() : '';\nvar saldo = msg.payload[0] ? msg.payload[0].Saldo : 'N/A';\nvar username = msg.payload[0] ? msg.payload[0].Username : 'N/A';\nvar userdecod = decodeURIComponent(escape(username));\n\nif (msg.payload.length > 0) {\n    console.log(\"Olá \" + userdecod + \"! Tens \" + saldo + \" de saldo no Cartão. Clica no botão para comprar!\");\n\n    // Aguardar 1 minuto antes de permitir o desconto\n    setTimeout(function () {\n        console.log(\"Passou 1 minuto. Agora podes clicar no botão para comprar!\");\n    }, 60000);\n} else {\n    console.log(\"Cartão não registado!\");\n}\n\n// Verificar se a mensagem é um evento de controle do botão\nif (msg.hasOwnProperty('ui_control') && msg.ui_control.hasOwnProperty('event') && msg.ui_control.event === 'click') {\n    // Realizar desconto (exemplo de desconto de 5.99)\n    var desconto = 5.99; // ajuste conforme necessário\n    if (saldo >= desconto) {\n        var novoSaldo = saldo - desconto;\n        console.log(\"Desconto de \" + desconto + \" aplicado. Novo saldo: \" + novoSaldo);\n\n        // Aqui você deve implementar a lógica para atualizar o saldo na base de dados\n        // Certifique-se de usar uma instrução SQL UPDATE para atualizar o saldo do usuário\n    } else {\n        console.log(\"Saldo insuficiente para o desconto.\");\n    }\n}\n\n// Retornar null para interromper o fluxo\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 360,
        "wires": [
            [
                "5e61badf598aa024",
                "dadd20a204f15906"
            ]
        ]
    },
    {
        "id": "d340e847361c8e92",
        "type": "mysql",
        "z": "7869be979f4028b5",
        "mydb": "f4063cddb9175b65",
        "name": "",
        "x": 470,
        "y": 260,
        "wires": [
            [
                "d988791fa63c92a1"
            ]
        ]
    },
    {
        "id": "dadd20a204f15906",
        "type": "debug",
        "z": "7869be979f4028b5",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 420,
        "wires": []
    },
    {
        "id": "3ea0990259fc8187",
        "type": "serial-port",
        "name": "",
        "serialport": "COM5",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "f4063cddb9175b65",
        "type": "MySQLdatabase",
        "name": "pap-maquina-de-vendas",
        "host": "localhost",
        "port": "3306",
        "db": "pap-maquina-de-vendas",
        "tz": "",
        "charset": "UTF8"
    }
]